class Solution {
public:
    vector<int> shortestToChar(string s, char c) {
        int n = s.length();
        vector<int> result(n);

        for (int i = 0; i < n; i++) {
            int leftDist = INT_MAX;
            int rightDist = INT_MAX;

            // Traverse from left to right
            for (int j = i; j >= 0; j--) {
                if (s[j] == c) {
                    leftDist = i - j;
                    break;
                }
            }

            // Traverse from right to left
            for (int j = i; j < n; j++) {
                if (s[j] == c) {
                    rightDist = j - i;
                    break;
                }
            }

            // Find the minimum distance from left and right
            result[i] = min(leftDist, rightDist);
        }

        return result;
    }
};



class Solution {
public:
    vector<int> shortestToChar(string s, char c) {
        int start = 0,end= 0;
        int len = s.size();
        vector<int> ans(len, INT_MAX);
        bool flag = 0;
        while(start <= end && end < len){
            if(flag){
                ans[end] = end-start+1;
            }
            while(start <= end && s[end] == c){
                flag = 1;
                ans[start] = min(ans[start],end-start);
                start++;
            }
            end++;
        }
        return ans;
    }
};
