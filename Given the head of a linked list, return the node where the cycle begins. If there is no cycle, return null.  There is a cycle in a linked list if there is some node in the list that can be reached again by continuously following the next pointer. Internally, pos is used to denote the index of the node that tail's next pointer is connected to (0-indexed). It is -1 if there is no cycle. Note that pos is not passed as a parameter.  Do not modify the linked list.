class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        if (head == nullptr || head->next == nullptr) return nullptr;

        ListNode *slow = head, *fast = head;

        // Detect cycle
        while (fast != nullptr && fast->next != nullptr) {
            slow = slow->next;
            fast = fast->next->next;

            if (slow == fast) {
                break;
            }
        }

        // If there is no cycle
        if (fast == nullptr || fast->next == nullptr) {
            return nullptr;
        }

        // Reset one pointer to the head and move both pointers one step at a time
        slow = head;
        while (slow != fast) {
            slow = slow->next;
            fast = fast->next;
        }

        // The meeting point is the start of the cycle
        return slow;
    }
};
