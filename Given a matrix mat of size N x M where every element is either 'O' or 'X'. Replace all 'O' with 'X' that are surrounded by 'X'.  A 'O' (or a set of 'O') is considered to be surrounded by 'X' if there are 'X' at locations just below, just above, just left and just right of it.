void dfs(int n, int m, vector<vector<char>>&mat, int i, int j, vector<vector<int>>& visited){
        visited[i][j]=1;
        
        mat[i][j]='C';
        
        if(i-1>=0 && mat[i-1][j]=='O' && visited[i-1][j]==0) dfs(n, m, mat, i-1, j, visited);
        if(i+1<n && mat[i+1][j]=='O' && visited[i+1][j]==0) dfs(n, m, mat, i+1, j, visited);
        if(j-1>=0 && mat[i][j-1]=='O' && visited[i][j-1]==0) dfs(n, m, mat, i, j-1, visited);
        if(j+1<m && mat[i][j+1]=='O' && visited[i][j+1]==0) dfs(n, m, mat, i, j+1, visited);
        
        
    }
    vector<vector<char>> fill(int n, int m, vector<vector<char>>& mat)
    {
        // code here
        vector<vector<int>> visited(n, vector<int>(m,0));
        
        for(int i=0;i<n;i++){
            if(mat[i][0]=='O' && visited[i][0]==0)  dfs(n, m, mat, i, 0,visited);
            if(mat[i][m-1]=='O' && visited[i][m-1]==0)    dfs(n, m, mat, i, m-1,visited);
        }
        for(int j=0;j<m;j++){    
            if(mat[0][j]=='O' && visited[0][j]==0)  dfs(n, m, mat, 0, j,visited);
            if(mat[n-1][j]=='O'&& visited[n-1][j]==0)    dfs(n, m, mat, n-1, j,visited);    
        }
        
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(mat[i][j]!='C')  mat[i][j]='X';
            }
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(mat[i][j]=='C')  mat[i][j]='O';
            }
        }
        return mat;
        
    }
