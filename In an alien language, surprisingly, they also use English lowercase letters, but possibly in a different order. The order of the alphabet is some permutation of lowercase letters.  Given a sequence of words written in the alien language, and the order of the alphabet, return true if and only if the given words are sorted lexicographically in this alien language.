// class Solution {
// public:
//     bool isAlienSorted(vector<string>& words, string order) {
//         for (int i = 0; i < words.size() - 1; i++) {
//         string word1 = words[i];
//         string word2 = words[i + 1];
//         int i1 = 0, i2 = 0;
//         while (word1[i1] == word2[i2]) {
//             i1++, i2++;
//         }
//         int r = order.find(word1[i1]);   
//         int s = order.find(word2[i2]);
//         if (r > s) return false;
//     }
//     return true;
//     }
// };



class Solution {
public:
    bool isAlienSorted(vector<string>& words, string order) {
        unordered_map<char,char> map;
        
        for(int i=0;i<26;i++){
            map[order[i]]= ('a'+i);
        }
        
        for(int i=0;i<words.size();i++){
            for(int j=0;j<words[i].size();j++){
                words[i][j]= map[words[i][j]];
            }
        }
        
        return is_sorted(words.begin(),words.end());
    }
};
