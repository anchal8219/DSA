class Solution {
public:
    int kthSmallest(vector<vector<int>>& matrix, int k) {
        int n=matrix.size();
        int l=matrix[0][0],h=matrix[n-1][n-1],m;
        while(l<h){
            m=l+(h-l)/2;
            int c=0;
            for(int i=0;i<n;i++)
            c+= upper_bound(matrix[i].begin(),matrix[i].end(),m)-matrix[i].begin();

            if(c<k){
                l = m+1;
            }
            else{
                h = m;
            }
        }
        return l;
    }
};





// class Solution {
// public:
//     int kthSmallest(vector<vector<int>>& matrix, int k) {
//         priority_queue<int>pq; int n = matrix.size();
//         for(int i = 0; i < n; i++)
//             for(int j = 0; j < n; j++){
//                 pq.push(matrix[i][j]);
//                 if(pq.size() > k) pq.pop();
//             }
//         return pq.top();   
//     }
// };
